#!/usr/bin/env python

#TODO
# Rework
# -Need to do some reworking for final part:
# -avt should open the main.c
#   -THEN do what run currently does for each user created imported file
#
# -HOW TO GET IMPORTED FILES
# header file names don't neccessarily correlate to their source file name
# Might be better to do it with all *.c files in the directory that aren't main?
#   Buuuut then that fails to consider programs that don't have main.c as their entry
#   Could search through every *.c file that doesn't contain a main(){}? 
# Easiest way to do this would be to make a class that uses instances of current AVT for each include

#LIMITATIONS:
#The tool can only handle a single function in a single file presently.
#The target file should have a related Makefile in the same directory for the tool to modify
#Function in target file must be a void return type

import sys
import subprocess
import os.path

resolverTemplate = [   '#include <sys/auxv.h>',
   '',
   'static void (*resolve_foo(void)) {',
   '    long hwcaps = getauxval(AT_HWCAP);',
   '    long hwcaps2 = getauxval(AT_HWCAP2);',
   '',
   '    if (hwcaps2 & HWCAP2_SVE2)',
   '        return foo_SVE2;',
   '    else if (hwcaps & HWCAP_SVE)',
   '        return foo_SVE;',
   '    else ',
   '        return foo_NonSVE;',
   '}',
   '',
   'void *foo() __attribute__((ifunc("resolve_foo")));',
   '',
   'int main() {',
   '    foo();',
   '}'
]

#GCC target pragmas
class pragmas:
    SVE2 = "#pragma GCC target \"march=armv8-a+sve2\""
    SVE = "#pragma GCC target \"march=armv8-a+sve\""
    NonSVE = "#pragma GCC target \"march=armv8-a\""
    

#color codes
class txtColors:
    FAIL = '\033[91m'
    WARNING = '\033[93m'
    GREEN = '\033[92m'
    STD = '\033[0m'

# Function suffixes
nonsve = '_NonSVE'
sve = '_SVE'
sve2 = '_SVE2'


class autoVectorTool:
    def __init__(self, filename:str):
        self._filename = filename
        self._newFile = ""
        self.orig_functionLines = self.getFunction()
        self._functionName = ""
        
    def run(self):
        functSVE2 = self.editFunction(self.orig_functionLines.copy(), sve2)
        functSVE = self.editFunction(self.orig_functionLines.copy(), sve)
        functNonSVE = self.editFunction(self.orig_functionLines.copy(), nonsve)

        fNameParts = self._filename.split(".")
        self._newFile = fNameParts[0] + "_AVT." + fNameParts[1]

        self.writeFunction(functSVE2, pragmas.SVE2)
        self.writeFunction(functSVE, pragmas.SVE)
        self.writeFunction(functNonSVE, pragmas.NonSVE)

        self.writeIFuncBits()
        #self.modifyMakefile() #removing to call seperately based on user input

    def modifyMakefile(self):
        f = self._filename.split('.')
        searchStr = f[0]
        newMF = []
        nf = self._newFile.split('.')
        replacementStr = nf[0]
        try:
            with open("Makefile", 'r') as mf:
                origMF = mf.read().splitlines()
                for line in origMF:
                    if searchStr in line:
                        line = line.replace(searchStr, replacementStr)
                    newMF.append(line)
            with open("Makefile", 'w') as mf:
                for line in newMF:
                    mf.write(line + '\n')
        except:
            print(txtColors.FAIL + "Unable to modify Makefile.\n" + txtColors.WARNING + "Ensure that a Makefile is present in the current to be modified by AVT" + txtColors.STD)

    def writeIFuncBits(self):
        newIfuncBits:list = []

        for line in resolverTemplate:
            if "foo" in line:
                line = line.replace("foo", self._functionName)
            newIfuncBits.append(line)
        self.writeFunction(newIfuncBits)

    def editFunction(self, functionLines:list, vectorizationSuffix:str = ""):
        declaration = functionLines[0]

        declParts = declaration.split("(")
        declPts2 = declParts[0].split(" ")

        if not self._functionName:
            self._functionName = declPts2[1]
        declPts2[1] = "*" + declPts2[1]
        declParts[0] = declPts2[0] + " " + declPts2[1]
        declParts[0] += vectorizationSuffix

        newDeclaration = declParts[0] + "(" + declParts[1]
        functionLines[0] = newDeclaration

        return functionLines

    def writeFunction(self, functionLines:list, pragmaStatement:str = ""):
        with open(self._newFile, 'a') as file:
            file.write('\n')
            file.write(pragmaStatement + '\n')
            for line in functionLines:
                file.write(line + '\n')

    # Currently: Can retrieve a single function as a list of strings
    # TODO: utilize makeFunctionLineList() to be able to return a list of lists of function lines
    # ...(to clarify, return an array of functions broken down by lines)
    def getFunction(self):
        try:
            with open (self._filename, 'r') as src:
                src_orig = src.read().splitlines()

                functionLines:list = []

                isFunctionLine = False
                openBrackets = 0

                for line in src_orig:
                    if isFunctionLine is False:
                        if "(" in line and "void" in line:
                            isFunctionLine = True
                            functionLines.append(line)
                    else:
                        if "{" in line:
                            openBrackets = openBrackets + 1
                            functionLines.append(line)
                        elif "}" in line:
                            openBrackets = openBrackets - 1
                            functionLines.append(line)
                            if openBrackets == 0:
                                isFunctionLine = False
                                break
                        else:
                            functionLines.append(line)
                return functionLines
        except:
            print(txtColors.FAIL + "\nERROR: Unable to retrieve function in file \"" + self._filename +  "\"\n")
            print(txtColors.WARNING + "Ensure that the file name is correct and that the file exists in the current directory" + txtColors.STD)

    def makeFunctionLineList(self, functionLines:list):
        return functionLines       

    def confirmNewFile(self):
        if os.path.exists(self._newFile):
            print(txtColors.GREEN + "fileToArray succesfully created" + "\'" + self._output + "\'" + txtColors.STD)
        else:
            print(txtColors.FAIL + "AVT unable to confirm " + self._output + " was sucessfully created." + txtColors.STD)
#==============================================================================#

def printInvalidOptionsMessage():
    print(txtColors.FAIL + "Invalid options included in AVT call")
    print(txtColors.WARNING + "Use < py avt -h > to see available options" + txtColors.STD)
    
#Implementation 1st pass
#ONLY NEEDS TO WORK WITH TEST CODE!!!
if __name__ == "__main__":
    if len(sys.argv) < 2:
        raise Exception(txtColors.FAIL + 
        "To use the avt tool you must call it with a file like so:\n" + 
        txtColors.WARNING + "      " + "< py avt function.c >\n" +
        "OR       < py avt -h > in order to see optional commands" +
        txtColors.STD)
    elif len(sys.argv) < 3:
        if sys.argv[1] == '-h':
            print("AutoVectorTool options:")
            print(txtColors.GREEN + "\n-m   :   modify a makefile and call make after modifying" + txtColors.STD)
            print('')
            sys.exit()
        else:
            avt = autoVectorTool(sys.argv[1])
            avt.run()
            sys.exit()
    elif len(sys.argv) < 4:
        if sys.argv[2] == '-m':
            avt = autoVectorTool(sys.argv[1])
            avt.run()
            p = subprocess.Popen('make', stdout=subprocess.PIPE)
            for line in p.stdout:
                print(line)
            p.wait()
        else:
            printInvalidOptionsMessage()
    elif len(sys.argv) > 3:
       printInvalidOptionsMessage()
    else:
        printInvalidOptionsMessage()

