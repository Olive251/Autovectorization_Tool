#!/usr/bin/env python
import sys
import subprocess
import os.path
import re

class resolverTemplate:
    resolver = [
    'static void (*resolve_foo(void)) {',
    '    long hwcaps = getauxval(AT_HWCAP);',
    '    long hwcaps2 = getauxval(AT_HWCAP2);',
    '',
    '    if (hwcaps2 & HWCAP2_SVE2)',
    '        return foo_SVE2;',
    '    else if (hwcaps & HWCAP_SVE)',
    '        return foo_SVE;',
    '    else ',
    '        return foo_NonSVE;',
    '}',
    '',
    'void *foo() __attribute__((ifunc("resolve_foo")));',
    ]
    main = [
        'int main() {'
    ]

#GCC target pragmas
class pragmas:
    SVE2 = "#pragma GCC target \"march=armv8-a+sve2\""
    SVE = "#pragma GCC target \"march=armv8-a+sve\""
    NonSVE = "#pragma GCC target \"march=armv8-a\""

#color codes
class txtColors:
    RED = '\033[91m'
    YELLOW = '\033[93m'
    GREEN = '\033[92m'
    BLUE = '\033[94m'
    STD = '\033[0m'

# Function suffixes
nonsve = '_NonSVE'
sve = '_SVE'
sve2 = '_SVE2'

class functionConverter:
    def __init__(self, functLines:list):
        self._functName = ""
        self._returnType = ""
        self._functLines = functLines
        self.setFunctInfo()

    def setFunctInfo(self):
        declaration = self._functLines[0]

        declParts = declaration.split("(")
        declPts2 = declParts[0].split(" ")

        self._returnType = declPts2[0]
        self._functName = declPts2[1]

    def getNewFunction(self, avType:int):
        vectorizationSuffix = ""
        pragma = ""
        if avType == 1:
            vectorizationSuffix = nonsve
            pragma = pragmas.NonSVE
        elif avType == 2:
            vectorizationSuffix = sve
            pragma = pragmas.SVE
        elif avType == 3:
            vectorizationSuffix = sve2
            pragma = pragmas.SVE2
        else:
            raise TypeError("Bad value passed into getNewFunction()")
        
        return self.editFunction(vectorizationSuffix, pragma)

    def editFunction(self, vecSuf:str, pragma:str):
        nFunc = []
        nFunc.append(pragma + '\n')
        if ')' not in self._functLines[0]:
            self._functLines[0] += self._functLines[1]
            self._functLines.pop(1)
        for line in self._functLines:
            nFunc.append(line + '\n')

        declaration = nFunc[1]
        declParts = declaration.split("(")
        
        declParts[0] = self._returnType + " *" + self._functName
        declParts[0] += vecSuf

        newDeclaration = declParts[0] + "(" + declParts[1]
        nFunc[1] = newDeclaration
        nFunc.append('\n')

        return nFunc
    
    def getOrigFunction(self):
        return self._functLines
#=====================================================================================================================================#

class ifuncWriter:
    def __init__(self):
        self._resolvers = []
        self._main = resolverTemplate.main.copy()

    def __add__(self, functionName:str):
        resolver = ["//resolver for " + functionName]
        for line in resolverTemplate.resolver:
            line = line.replace("foo", functionName)
            resolver.append(line)
        self._resolvers.append(resolver)
        self.modifyMain(functionName)

    def modifyMain(self, functionName:str):
        self._main.append('    ' + functionName + '();')

    def getIfuncBits(self):
        self._main.append('}')
        ifuncBits = []
        for resolver in self._resolvers:
            for line in resolver:
                ifuncBits.append(line + '\n')
            ifuncBits.append('\n')
        ifuncBits.append('\n')
        for line in self._main:
            ifuncBits.append(line + '\n')

        return ifuncBits
#=====================================================================================================================================#

class autoVectorTool:
    def __init__(self, filename:str):
        self._filename = filename
        fNameParts = filename.split(".")
        self._newFile = fNameParts[0] + "_AVT." + fNameParts[1]
        self._ifuncBits = ifuncWriter()
        self._origContent = []
        self._functions = []
        self.setOrigContent()
        self.getFunctions()
        
    def run(self, avTypes:list):
        for function in self._functions:
            self._ifuncBits + function._functName
        
        self.writeNewFile(avTypes)
        self.confirmNewFile()
        
    def writeNewFile(self, avTypes:list):
        with open (self._newFile, 'w') as file:
            file.write('#include <sys/auxv.h>\n')
            if avTypes[0] == 0:
                for function in self._functions:
                    file.write("\n//" + function._functName + " ============================================================================//\n")
                    file.writelines(function.getNewFunction(1))
                    file.writelines(function.getNewFunction(2))
                    file.writelines(function.getNewFunction(3))
            else:
                for function in self._functions:
                    for av in avTypes:
                        file.writelines(function.getNewFunction(av))
            file.writelines(self._ifuncBits.getIfuncBits())

    def setOrigContent(self):
        try:
            with open (self._filename, 'r') as src:
                for line in src.read().splitlines():
                    self._origContent.append(line)
        except:            
            print(txtColors.RED + "\nERROR: Unable to retrieve file content from\"" + self._filename +  "\"\n")
            print(txtColors.YELLOW + "Ensure that the file name is correct and that the file is in the current directory" + txtColors.STD)
            sys.exit() 

    def getFunctions(self):
        functDecPattern1 = re.compile(r"[A-Za-z0-9]+\s+[A-Za-z0-9]", re.IGNORECASE)

        try:
            functionLines:list = []
            isFunctionLine = False
            openBrackets = 0
            for line in self._origContent:
                if isFunctionLine is False:
                    #TODO -make this more secure. Use regex or something. This could easily catch non-functions too
                    if "(" in line:
                        tokens = line.split("(")
                        if functDecPattern1.match(tokens[0]): 
                            isFunctionLine = True
                            functionLines.append(line)
                    if "{" in line:
                        openBrackets += 1
                else:
                    if "{" in line:
                        openBrackets += 1
                        functionLines.append(line)
                    elif "}" in line:
                        openBrackets -= 1
                        functionLines.append(line)
                        if openBrackets == 0:
                            isFunctionLine = False
                            self._functions.append(functionConverter(functionLines))
                            functionLines = []
                    else:
                        functionLines.append(line)
        except:
            print(txtColors.RED + "\nERROR: Unable to retrieve function in file content for \"" + self._filename +  "\"\n")
            print(txtColors.YELLOW + "Ensure that the file name is correct and that the file contains functions" + txtColors.STD)  
            sys.exit()   

    def confirmNewFile(self):
        if os.path.exists(self._newFile):
            print(txtColors.GREEN + "AVT succesfully created " + "\'" + self._newFile + "\'" + txtColors.STD)
        else:
            print(txtColors.RED + "AVT unable to confirm " + self._newFile + " was sucessfully created." + txtColors.STD)

    def modifyMakefile(self):
        f = self._filename.split('.')
        searchStr = f[0]
        newMF = []
        nf = self._newFile.split('.')
        replacementStr = nf[0]
        try:
            with open("Makefile", 'r') as mf:
                origMF = mf.read().splitlines()
                for line in origMF:
                    if searchStr in line:
                        line = line.replace(searchStr, replacementStr)
                    newMF.append(line)
            with open("Makefile", 'w') as mf:
                for line in newMF:
                    mf.write(line + '\n')
        except:
            print(txtColors.RED + "Unable to modify Makefile.\n" + txtColors.YELLOW + "Ensure that a Makefile is present in the current to be modified by AVT" + txtColors.STD)
#=====================================================================================================================================#

class avtFactorum:
    def __init__(self, args):
        self._files = []
        self._options = []
        self._toolLines = []

        self.handleArgs(args)
        self.makeTools()

    def run(self):
        if '-h' in self._options:
            self.help()

        avTypes:int = []
        if '-nsve' in self._options:
            avTypes.append(1)
        if '-sve' in self._options:
            avTypes.append(2)
        if '-sve2' in self._options:
            avTypes.append(3)

        for tool in self._toolLines:
            tool.run(avTypes)

    def handleArgs(self, args):
        args.pop(0)
        for arg in args:
            if arg.startswith('-'):
                self._options.append(arg)
            else:
                self._files.append(arg)

    def makeTools(self):
        for file in self._files:
            self._toolLines.append(autoVectorTool(file))

    def runMake(self):
        p = subprocess.Popen('make', stdout=subprocess.PIPE)
        print (txtColors.BLUE + "Make status:")
        for line in p.stdout:
            print(line)
        p.wait()

    def printInvalidOptionsMessage(self):
        print(txtColors.RED + "Invalid options included in AVT call")
        print(txtColors.YELLOW + "Use < py avt -h > to see available options" + txtColors.STD)

    def noFileErr(self):
        raise Exception(txtColors.RED + 
            "To use the avt tool you must call it with a file like so:\n" + 
            txtColors.YELLOW + "      " + "< py avt function.c >\n" +
            "OR       < py avt -h > to see optional options" +
            txtColors.STD)

    def help(self):
        print(txtColors.BLUE + "\nAutoVectorTool options:")
        print(txtColors.GREEN + "\n-h                    :  display help menu; view all options" + txtColors.STD)
        print(txtColors.GREEN + "\n-m                    :  modify an existing makefile and call make" + txtColors.STD)
        print(txtColors.GREEN + "\n-nsve, -sve, -sve2    :  make changes for specific autovectorization type. (can call multiple target options)" + txtColors.STD)
        print('')
        sys.exit()

if __name__ == "__main__":
    factorum = avtFactorum(sys.argv)
    factorum.run()